from collections import Optional
from memory.unsafe_pointer import UnsafePointer
from memory.arc import ArcPointer
from testing import assert_true


trait NType(
    CollectionElement,
    ComparableCollectionElement,
    RepresentableCollectionElement,
    Writable,
    Stringable,
):
    pass


@value
struct Node[T: NType](Writable):
    var value: Optional[T]
    var next: ArcPointer[Optional[Self]]
    var prev: ArcPointer[Optional[Self]]

    fn __init__(out self):
        self.value = Optional[T]()
        self.next = ArcPointer(Optional[Self]())
        self.prev = ArcPointer(Optional[Self]())

    fn __init__(out self, value: T):
        self = Self()
        self.value = Optional(value)

    fn __init__(out self, value: T, next_node: Self, prev_node: Self):
        self = Self()
        self.value = Optional(value)
        self.append(next_node)
        self.prepend(prev_node)

    fn __setitem__(mut self, value: T):
        self.value = Optional(value)

    fn __getitem__(self) -> T:
        if not self.value:
            return Optional[T]().value()
        else:
            return self.value.value()

    fn __getitem__(self, node: String) -> Self:
        if node == "next":
            return self.next[].value()
        elif node == "prev":
            return self.prev[].value()
        else:
            return Self()

    fn append(mut self, next_node: Self):
        var ptr = ArcPointer(Optional(next_node))
        self.next = ptr

    fn prepend(mut self, prev_node: Self):
        var ptr = ArcPointer(Optional(prev_node))
        self.prev = ptr

    fn write_to[W: Writer](self, mut writer: W):
        try:
            var value = self.value.value().__str__()
            var output = String("")
            output += "value: {0}\n".format(value)
            if self.prev[]:
                output += "\tprev: {0}\n".format(
                    self.prev[].value()[].__str__()
                )
            if self.next[]:
                output += "\tnext: {0}\n".format(
                    self.next[].value()[].__str__()
                )
            writer.write(output)
        except:
            writer.write("value: N/A")


@value
struct LinkedList[T: NType]:
    var head: Optional[Node[T]]
    var tail: Optional[Node[T]]
    var size: Int32

    fn __init__(out self):
        self.head = Optional[Node[T]]()
        self.tail = Optional[Node[T]]()
        self.size = 0
